{"version":3,"sources":["theme/index.ts","components/Summary.tsx","components/Header.tsx","data/SummaryData.ts","data/HeaderData.ts","pages/Landing.tsx","pages/AllPages.tsx","common/Constants.ts","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","indigo","Summary","props","Paper","Grid","container","item","Typography","variant","color","detail","Header","xs","sm","name","designation","phone","email","linkedInURL","githubURL","summaryData","bullets","headerData","Landing","console","log","Box","px","py","spacing","Divider","AllPages","ThemeProvider","CssBaseline","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.01bf43c0.chunk.js","sourcesContent":["\nimport {\n  createMuiTheme,\n  makeStyles,\n  createStyles,\n  Theme as AugmentedTheme,\n  ThemeProvider,\n} from '@material-ui/core/styles';\nimport { orange, indigo } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n  },\n});\n\nexport default theme;","import React from 'react';\nimport { Grid, Button, Box, Paper, Typography } from \"@material-ui/core\";\nimport {ISummaryProps} from '../types/pages';\n\nconst Summary = (props: ISummaryProps) => (\n  <Paper>\n    <Grid container>\n      <Grid item>\n        <Typography variant=\"h5\" color=\"primary\">\n          Summary\n        </Typography>\n      </Grid>\n      <Grid item>\n        <Typography>\n        {props?.detail}\n        </Typography>\n      </Grid>\n    </Grid>\n  </Paper>  \n);\n\nexport default Summary;","import React from \"react\";\nimport { IHeaderProps } from \"../types/pages\";\nimport { Grid, Button, Box, Paper, Typography } from \"@material-ui/core\";\n\nconst Header = (props: IHeaderProps) => {\n  return (\n    <Paper>\n      <Grid container>\n        <Grid item xs={12} sm={9}>\n          <Grid container>\n            <Grid item xs={12}>\n              <Typography variant=\"h3\">{props.name}</Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Typography variant=\"body1\">\n                {props?.designation}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12} sm={3}>\n          <Grid container>\n            <Grid item xs={12}>\n              <Typography variant=\"body1\"> {props.phone}</Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Typography variant=\"body1\">\n                {props.email}\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Typography variant=\"body1\">\n                {props.linkedInURL}\n              </Typography>\n            </Grid>\n            <Grid item xs={12}>\n              <Typography variant=\"body1\">\n                {props.githubURL}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Header;\n","import {ISummarydata} from '../types/data';\n\nexport const summaryData:ISummarydata = {\n  detail: \"Summary\",\n  bullets: [\n    \"This is the Summary\",\n    \"This is the Summary 2\"]\n  }\n\n  export default summaryData;","import {IHeaderdata} from '../types/data';\n\nexport const headerData:IHeaderdata = {\n  name: \"Parveen Gupta\",\n  designation: \"Principal Software Engineer\",\n  email: \"parveen.gupta@hotmail.com\",\n  phone: \"801.916.8498\"\n}\n\nexport default headerData;","import React from 'react';\nimport { Grid, Button, Box, Divider } from \"@material-ui/core\";\nimport Summary from '../components/Summary';\nimport Header from '../components/Header';\nimport summaryData from '../data/SummaryData';\nimport headerData from '../data/HeaderData';\n\nconst Landing = () => {\n  console.log(summaryData);\n  return (\n    <Box px={2} py={2}>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Header {...headerData}></Header>\n        </Grid>\n        <Grid item xs={12}>\n          <Divider/>\n        </Grid>\n        <Grid item xs={12}>\n          <Summary {...summaryData}></Summary>\n        </Grid>\n        <Grid item xs={12}>\n          <Divider/>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Landing;\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport theme from \"../theme\";\nimport { HOME_PAGE, ROOT } from \"../common/Constants\";\nimport Landing from '../pages/Landing';\n\nconst AllPages = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <BrowserRouter basename={ROOT}>\n      <Route path={ROOT} component={Landing} />\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n\nexport default AllPages;\n","export const ROOT = '/';\nexport const HOME_PAGE = '/home';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Landing from './pages/Landing';\nimport AllPages from './pages/AllPages';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AllPages/>\n    {/* <Landing /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}