{"version":3,"sources":["assets/Parveen.jpg","theme/index.ts","components/Summary.tsx","components/Header.tsx","data/SummaryData.ts","data/HeaderData.ts","pages/Landing.tsx","pages/AllPages.tsx","common/Constants.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","theme","createMuiTheme","palette","primary","indigo","Summary","props","Paper","square","elevation","Box","padding","Grid","container","item","xs","Typography","variant","color","List","bullets","map","ListItem","ListItemIcon","ListItemText","Header","spacing","sm","Avatar","alt","src","Photo","name","designation","phone","email","githubURL","linkedInURL","summaryData","detail","headerData","Landing","console","log","px","py","Divider","orientation","AllPages","ThemeProvider","CssBaseline","basename","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5fcacb8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Parveen.68309492.jpg\";","\nimport {\n  createMuiTheme,\n  makeStyles,\n  createStyles,\n  Theme as AugmentedTheme,\n  ThemeProvider,\n} from '@material-ui/core/styles';\nimport { orange, indigo } from '@material-ui/core/colors';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: indigo,\n  },\n});\n\nexport default theme;","import React from \"react\";\nimport {\n  Grid,\n  Button,\n  Box,\n  Paper,\n  Typography,\n  ListItemIcon,\n} from \"@material-ui/core\";\nimport { ISummaryProps } from \"../types/pages\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport LabelIcon from \"@material-ui/icons/Label\";\n\nconst Summary = (props: ISummaryProps) => (\n  <Paper square elevation={0}>\n    <Box padding={2}>\n      <Grid container>\n        <Grid item xs={12}>\n          <Typography variant=\"h5\" color=\"primary\">\n            Summary\n          </Typography>\n        </Grid>\n        <Grid item xs={12}>\n          <List>\n            {props?.bullets?.map((item) => (\n              <ListItem>\n                <ListItemIcon>\n                  <LabelIcon />\n                </ListItemIcon>\n                <ListItemText\n                  primary={<Typography variant=\"body2\">{item}</Typography>}\n                />\n              </ListItem>\n            ))}\n          </List>\n        </Grid>\n      </Grid>\n    </Box>\n  </Paper>\n);\n\nexport default Summary;\n","import React from \"react\";\nimport { IHeaderProps } from \"../types/pages\";\nimport { Grid, Button, Box, Paper, Typography } from \"@material-ui/core\";\nimport PhoneAndroidIcon from \"@material-ui/icons/PhoneAndroid\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Photo from \"../assets/Parveen.jpg\";\n\nconst Header = (props: IHeaderProps) => {\n  return (\n    <Paper square elevation={0}>\n      <Box padding={2}>\n        <Grid container spacing={1}>\n          <Grid item xs={12} sm={9}>\n            <Grid container  spacing={1}>\n              <Grid item xs={12} sm={1}>\n                <Avatar alt=\"Parveen Gupta\" src={Photo} />\n              </Grid>\n              <Grid item xs={12} sm={11}>\n                <Grid container spacing={1}>\n                  <Grid item xs={12}>\n                    <Typography variant=\"h3\" color=\"primary\">\n                      {props.name}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={12}>\n                    <Typography variant=\"overline\">\n                      {props?.designation}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item xs={12} sm={3}>\n            <Grid container>\n              <Grid item xs={12}>\n                <Grid container spacing={1}>\n                  <Grid item xs={1}>\n                    <PhoneAndroidIcon color=\"primary\" />\n                  </Grid>\n                  <Grid item xs={11}>\n                    <Typography variant=\"body1\"> {props.phone}</Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12} spacing={1}>\n                <Grid container>\n                  <Grid item xs={1}>\n                    <EmailIcon color=\"primary\" />\n                  </Grid>\n                  <Grid item xs={11}>\n                    <Typography variant=\"body1\">{props.email}</Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12} spacing={1}>\n                <Grid container>\n                  <Grid item xs={1}>\n                    <GitHubIcon color=\"primary\" />\n                  </Grid>\n                  <Grid item xs={11}>\n                    <Typography variant=\"body1\">{props?.githubURL}</Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item xs={12} spacing={1}>\n                <Grid container>\n                  <Grid item xs={1}>\n                    <LinkedInIcon color=\"primary\" />\n                  </Grid>\n                  <Grid item xs={11}>\n                    <Typography variant=\"body1\">\n                      {props?.linkedInURL}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Box>\n    </Paper>\n  );\n};\n\nexport default Header;\n","import { ISummarydata } from \"../types/data\";\n\nexport const summaryData: ISummarydata = {\n  detail: \"Summary\",\n  bullets: [\n    \"15+ yearsâ€™ experience in high end programming and delivering high quality and scalable applications.\",\n    \"Accomplished programming skills in Java, JavaScript, Typescript.\",\n    \"Strong understanding on Object-Oriented, Functional and Procedural programming paradigm.\",\n    \"Good understanding of SQL, Relational and Document database.\",\n    \"Experience in using ReactJS with Material UI and Kendo UI component library.\",\n    \"Experience on AWS Serverless technologies including AWS Amplify, AWS AppSync (GraphQL), Lambdas, ElasticSearch, DynamoDB, Cognito User Pools.\",\n    \"Good Understanding on Microservices based patterns and architectures.\",\n    \"Strong skills in CI/CD using Azure Devops, AWS Code Build, GitLab pipelines, Code Commit, Cloud Formation.\",\n    \"Strong experience building technology teams with mix of experience, enthusiasm and emphasis on autonomy,team motivation, delegation, coaching and team building.\",\n    \"Effective leader, mentor and a team player.\",\n    \"Problem Solver, dependable, good listener and well communicator.\",\n    \"One of the go-to persons during project fires.\",\n    \"Technology enthusiast and task automation proponent.\",\n  ],\n};\n\nexport default summaryData;\n","import {IHeaderdata} from '../types/data';\n\nexport const headerData:IHeaderdata = {\n  name: \"Parveen Gupta\",\n  designation: \"Principal Software Engineer\",\n  email: \"parveen.gupta@hotmail.com\",\n  phone: \"801.916.8498\",\n  githubURL: \"github.com/pgupta04\",\n  linkedInURL: \"linkedin.com/in/guptaparveen\",\n}\n\nexport default headerData;","import React from \"react\";\nimport { Grid, Button, Box, Divider } from \"@material-ui/core\";\nimport Summary from \"../components/Summary\";\nimport Header from \"../components/Header\";\nimport summaryData from \"../data/SummaryData\";\nimport headerData from \"../data/HeaderData\";\n\nconst Landing = () => {\n  console.log(summaryData);\n  return (\n    <Box px={2} py={2}>\n      <Grid container spacing={2}>\n        <Grid item xs={12}>\n          <Header {...headerData}></Header>\n        </Grid>\n        <Grid item xs={12}>\n          <Divider />\n        </Grid>\n        <Grid item xs={12}>\n          <Grid container spacing={1}>\n            <Grid item xs={12} sm={8}>\n              <Summary {...summaryData}></Summary>\n            </Grid>\n            <Grid item>\n              <Divider orientation=\"vertical\"/>\n            </Grid>\n            <Grid item xs={12} sm={3}>\n              <Summary {...summaryData}></Summary>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Divider />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default Landing;\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport theme from \"../theme\";\nimport { HOME_PAGE, ROOT } from \"../common/Constants\";\nimport Landing from '../pages/Landing';\n\nconst AllPages = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <BrowserRouter basename={ROOT}>\n      <Route path={ROOT} component={Landing} />\n      </BrowserRouter>\n    </ThemeProvider>\n  );\n};\n\nexport default AllPages;\n","export const ROOT = '/';\nexport const HOME_PAGE = '/home';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Landing from './pages/Landing';\nimport AllPages from './pages/AllPages';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AllPages/>\n    {/* <Landing /> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}